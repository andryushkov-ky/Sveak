import React, {Component} from 'react'
import {connect} from 'react-redux'
import {Link} from 'react-router'
import uniqueString from 'unique-string'
import moment from 'moment'

import {
    getClientById,
    getCommentsById
} from 'selectors'

import {
    updateClient,
    addNewComment
} from 'actions'

import UpdateForm from 'components/updateForm'
import CommentForm from 'components/commentForm'

class Client extends Component {
    constructor (props) {
        super (props);

        this.state = {
            update: false,
            popupComment: false,
            commentsPage: 1
        }

        this.amountCommentsOnPage = 2;

        this.renderPagination = this.renderPagination.bind(this);
        this.renderComments = this.renderComments.bind(this);
    }

    toggleUpdate () {
        this.setState({
            update: !this.state.update
        })
    }

    toggleComment (status) {
        this.setState({
            popupComment: status
        });
    }

    renderMain () {
        const { client } = this.props;

        return (
            <div className="personal__main personal__main--start">
                <div className="personal__right">
                    <div className="form__row">
                        <span className="form__label-text">Имя</span>
                        <span className="personal__row-value">{client.name}</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Фамилия</span>
                        <span className="personal__row-value">{client.secondName}</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Email</span>
                        <span className="personal__row-value">{client.email}</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Телефон</span>
                        <span className="personal__row-value">{client.phone}</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Уезд</span>
                        <span className="personal__row-value">{client.region}</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Город / Область</span>
                        <span className="personal__row-value">{client.city}</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Адресс</span>
                        <span className="personal__row-value">{client.address}</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Индекс</span>
                        <span className="personal__row-value">{client.index}</span>
                    </div>
                </div>
                <div className="personal__right">
                    <div className="form__row">
                        <span className="form__label-text">Статус клиента</span>
                        <span className="personal__row-value">Активный</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Источник</span>
                        <span className="personal__row-value">Через сайт</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">IP регистрации</span>
                        <span className="personal__row-value"><span className="personal__value--underline">{client.ipInfo.ip}</span> <span>( {client.ipInfo.country} )</span></span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Язык обращения</span>
                        <span className="personal__row-value">{client.language}</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Пригласил друзей</span>
                        <span className="personal__row-value">0</span>
                    </div>
                    <div className="form__row">
                        <span className="form__label-text">Рекламная рассылка</span>
                        <span className="personal__row-value">
                            <div className="personal__row-value--checkbox">
                                <input type="checkbox" checked={client.dispathEmail} disabled={true}/>
                                <label>э-почта</label>
                            </div>
                            <div className="personal__row-value--checkbox">
                                <input type="checkbox" checked={client.dispathSms} disabled={true}/>
                                <label>смс</label>
                            </div>
                        </span>
                    </div>
                </div>
            </div>
        )
    }

    submitClient (client) {
        if (client) {
            if (confirm("Вы хотите сохранить изменения?")) {
                this.props.addNewComment({
                    date: Date.now(),
                    id: uniqueString(),
                    clientId : this.props.client.id,
                    commentType: 0,
                    comment: "Администратор изменил данные клиента"
                });
                this.props.updateClient(client)
            }

            this.setState({
                update: false
            });
        }
    }

    submitNewComment (comment) {
        if (comment) {
            comment.clientId = this.props.client.id;
            comment.id = uniqueString();
            comment.date = Date.now();
            this.props.addNewComment(comment);
            this.setState({
                popupComment: false
            });
        }
    }

    renderComments (comment, index) {
        const date = moment(comment.date).format('MMMM Do HH:mm');

        return (
            <div key={index} className="comments__row">
                <div className="comments__col">{date}</div>
                <div className={`comments__col comments__col--` + `${comment.commentType}`}>{comment.comment}</div>
            </div>
        )
    }

    changePage (page) {
        this.setState({
            commentsPage: page
        });
    }

    renderPagination () {
        const { comments } = this.props;
        const pages = comments.length / this.amountCommentsOnPage;
        const pageCeil = Math.ceil(pages);
        let box =[];

        if (pages > 1) {
            for (let i = 0; i < pageCeil; i++) {box.push(i+1)}
            return (
                <div className="comments__pagination">
                    {box.map((page, index) => (
                        <div
                            onClick={this.changePage.bind(this, page)}
                            className={`comments__page ` + `${page === this.state.commentsPage ? "comments__page--active" : ""}`}
                            key={index}>
                            {page}
                        </div>
                    ))}
                </div>
            )
        }
    }

    render () {
        const { client, comments } = this.props;
        const start = this.state.commentsPage*this.amountCommentsOnPage - this.amountCommentsOnPage;
        const end = this.state.commentsPage*this.amountCommentsOnPage;

        return (
            <div className="client">
                <Link to="/" className="back-to-main">
                    Главная
                </Link>
                <div className="personal">
                    <div className="personal__header">
                        <h2 className="personal__title">Данные клиента</h2>
                        <span className="personal_edit" onClick={this.toggleUpdate.bind(this)}>
                            {!this.state.update ? 'Редактировать' : 'Отмена'}
                        </span>
                    </div>
                    {client && !this.state.update && this.renderMain()}
                    {client && this.state.update && <UpdateForm onSubmit={this.submitClient.bind(this)} client={client}></UpdateForm>}
                </div>
                <div className="comments personal">
                    <div className="personal__header">
                        <h2 className="personal__title">Комментарии</h2>
                        <span className="personal_edit" onClick={this.toggleComment.bind(this, true)}>
                            Добавить комментарий
                        </span>
                    </div>
                    {comments && this.renderPagination()}
                    <div className="comments__table">
                        <div className="comments__row">
                            <div className="comments__col">Дата</div>
                            <div className="comments__col">Комментарий</div>
                        </div>
                        {comments && comments.slice(start, end).map((comment, index) => this.renderComments(comment, index))}
                        {comments && comments.length === 0 &&
                            <div className="comments__row comments__row--empty">
                                К данному пользователю нет комментариев
                            </div>
                        }
                    </div>
                </div>
                <CommentForm onSubmit={this.submitNewComment.bind(this)} toggleComment={this.toggleComment.bind(this, false)} formActive={this.state.popupComment} />
                <div
                    onClick={this.toggleComment.bind(this, false)}
                    className="shadow"></div>
            </div>
        )
    }
}

const mapStateToProps = (state, ownProps) => ({
    client: getClientById(state, ownProps.params.id),
    comments: getCommentsById(state, ownProps.params.id)
})

const mapDispatchToProps = {
    updateClient,
    addNewComment
}

export default connect(mapStateToProps, mapDispatchToProps)(Client);